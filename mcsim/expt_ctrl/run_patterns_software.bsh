import org.micromanager.data.Coords;
import org.micromanager.data.Datastore;
import org.micromanager.data.Image;
import org.micromanager.data.Metadata;
import org.micromanager.data.Metadata.MetadataBuilder;
import org.micromanager.data.SummaryMetadata;
import org.micromanager.data.SummaryMetadataBuilder;
import org.micromanager.PropertyMap;
import org.micromanager.PropertyMap.PropertyMapBuilder ;
import org.micromanager.display.DisplayWindow;
import org.micromanager.MultiStagePosition;
import org.micromanager.SequenceSettings;
import org.micromanager.api.AcquisitionOptions;
import mmcorej.TaggedImage;
import ij.io.Opener; 
import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.GenericDialog;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.lang.System;
import java.lang.Math;

/*********************************
basic setup
*********************************/

String patterns_dir = "C:\\Users\\ptbrown2\\Desktop\\mcsim_private\\aberration_cal_patterns_4";
//String patterns_dir = "C:\\Users\\ptbrown2\\Desktop\\mcsim_private\\calibration_patterns";
int n_patterns = 5441;
String conda_env_name = "ptbrownenv";
String dmd_script_path = "C:\\Users\\ptbrown2\\Desktop\\mcsim_private\\mcSIM\\expt_ctrl\\load_dmd_pattern.py";

// triggerscope settings
boolean program_tscope = true; // false if already programmed and want to run same program again
boolean print_program = false;
int dmd_trig1_ttl = 7; // remember that this would be ttl[dmd_trig1_ttl - 1]
int dmd_trig2_ttl = 6; // should be HIGH to allow pattern to advance
int laser_ttl = 5;


/**
 * function to send serial data to triggerscope
 *
 * @param  inData		string to write to triggerscope
 * @param  print_answer	boolean flag, whether or not to print the answer received from the triggerscope	
 */
boolean tgsWrite(String inData, boolean print_command, boolean print_answer, int n_readlines) {
	if(print_command){print("sending: " + inData);}
	
	mmc.setSerialPortCommand(tscope_serial_port, inData, "\n");
	String tgAnswer = " ";
	
	// todo: would love to simply read until nothing left to read...
	// maybe try readFromSerialPort(java.lang.String portLabel)
	for (int ii=0; ii<n_readlines; ii++){
		Thread.sleep(5);
		tgAnswer = mmc.getSerialPortAnswer(tscope_serial_port, "\n");
		if(print_answer){print("response: " + tgAnswer);}
	}

	
	return true;	
}

print("\r");
print("####################################");
print("Starting sequence");
print("####################################");

/*****************************
stop any running acquisition
*****************************/
mm.live().setLiveMode(false);

/*****************************
set circular buffer
*****************************/
mmc.setCircularBufferMemoryFootprint(1000);
print("Circular buffer = " + mmc.getCircularBufferMemoryFootprint() + "MB");

// pull MDA settings
acqSettings = mm.acquisitions().getAcquisitionSettings();

// setup data path
rootDir = acqSettings.root;
prefixDir = acqSettings.prefix;
savePath = mm.data().getUniqueSaveDirectory(rootDir + "/" + prefixDir); //todo: combine paths in os independent way...
print("Saving data in: " + savePath);

// setup datastore
org.micromanager.data.internal.DefaultDatastore store = mm.data().createMultipageTIFFDatastore(savePath, true, false);
mm.displays().manage(store);

/*****************************
Build metadata
*****************************/
// current date/time
SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-dd-MM;HH:mm:ss.SSS");
String date = simpleDateFormat.format(new Date());

// keep whatever metadata MM stores by default
SummaryMetadata.SummaryMetadataBuilder summary_mdb = store.getSummaryMetadata().copy();

// intended dimensions and axis order
Coords.CoordsBuilder intended_dm_cb = mm.data().getCoordsBuilder().z(1).stagePosition(1).time(1).channel(n_patterns);

String [] aorder = {"time", "position", "z", "channel"};

// create new metadata
SummaryMetadata summary_md = summary_mdb.startDate(date).axisOrder(aorder).intendedDimensions(intended_dm_cb.build()).build();;
store.setSummaryMetadata(summary_md);

/*****************************
get camera devices
*****************************/

exposure_ms = mmc.getExposure();
camera = mmc.getCameraDevice();

/*****************************
Detect triggerscope properties
*****************************/

String tscope_hub;
String tscope_focus;
for (d : mmc.getLoadedDevices()) { // todo: get trigger scope device
	if (d.contains("TriggerScope") && d.contains("Hub")) {tscope_hub = d;}
	if (d.contains("TriggerScope") && d.contains("Focus")) {tscope_focus = d;}
}

String tscope_serial_port = mmc.getProperty(tscope_hub, "COM Port");
int focus_dac_index = Integer.parseInt(mmc.getProperty(tscope_focus, "DAC Number")) - 1;

/*****************************
give some time to leave room 
*****************************/
mmc.sleep(20000);

/*****************************
run sequence
*****************************/
for (int ic=0; ic < n_patterns; ic++){
	/*****************************
	program DMD
	*****************************/
	// ensure that DMD TTL trigger line is HIGH
	// unliked triggered sequence, where needed it to be low
	mmc.setProperty(String.format("TriggerScope-TTL%02d", new Object[] {dmd_trig1_ttl}), "State", 1);
	mmc.setProperty(String.format("TriggerScope-TTL%02d", new Object[] {dmd_trig2_ttl}), "State", 1);

	// Program DMD by calling python script
	// This will not run with a conda environment unless you also activate the environment
	// Easiest to install python and run without a virtual environment
	// Otherwise, need to add calls to start virtual environment before calling python
	print("setting DMD pattern");

	Runtime r = Runtime.getRuntime();
	Process p;

	p = r.exec("cmd /c conda activate " + conda_env_name + " & python " + dmd_script_path + " " + patterns_dir + " " + ic);
	print("cmd /c conda activate " + conda_env_name + " & python " + dmd_script_path + " " + patterns_dir + " " + ic);

	BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
	BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

	while ((s=stdInput.readLine()) != null){print(s);}
	while ((s=stdError.readLine()) != null){print(s);}

	/*****************************
	acquire
	*****************************/
	mmc.setProperty(String.format("TriggerScope-TTL%02d", new Object[] {laser_ttl}), "State", 1);
	mmc.snapImage();

	mmc.setProperty(String.format("TriggerScope-TTL%02d", new Object[] {laser_ttl}), "State", 0);


	TaggedImage img_tagged = mmc.getTaggedImage();
	Image image = mm.data().convertTaggedImage(img_tagged);

	MetadataBuilder mdb = image.getMetadata().copy();
	md = mdb.positionName("Pos-"+0).xPositionUm(0.0).yPositionUm(0.0).zPositionUm(0.0).exposureMs(exposure_ms).build();
				
	// coordinates for image
	coord_builder = mm.data().getCoordsBuilder().stagePosition(0).z(0).time(0).channel(ic);
	Coords coords = coord_builder.build();

	// place image with update metadata into dataStore
	store.putImage(image.copyWith(coords, md));	

}

//Finish writing data to disk and properly close datastore
store.freeze();
store.close();	

print("Finished");
